/**
                                        بِسْمِ اللهِ الرَّحْمٰنِ الرَّحِيْمِ
**/
#include <bits/stdc++.h>
using namespace std;
#define faster            ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define ff                first
#define ss                second
#define pb                push_back
#define pr                pair<int,int>
#define im                -1e18
#define mem(a,b)          memset(a,b,sizeof(a))
#define gcd(a, b)         __gcd(a, b)
#define lcm(a, b)         (a * (b / gcd(a, b)))
#define all(a)            a.begin(), a.end()
#define setbit(n)         __builtin_popcount(n);
#define totalbit(n)       log2(n)+1
#define oh                cout<<"Alpha valo sele"<<endl;

#define for0(a,n)         for(int i=a;i<n;i++)
#define for1(a,n)         for(int i=a;i<=n;i++)
#define rfor0(n, a)       for(int i=n-1; i>=a; i--)
#define rfor1(n, a)       for(int i=n; i>a; i--)

#define nl                endl
#define len(v)            v.size()
#define lena(a)           sizeof(a)/sizeof(a[0])
#define no                cout<<"NO"<<nl;
#define yes               cout<<"YES"<<nl;
#define posation(x)       cout<<fixed<<setprecision(x)
#define pi                3.141592653589793
#define INF               100000000000
#define mod               1000000007 //10^9+7;
#define num               105

/**----data type----**/
typedef long long int ll;
typedef unsigned long long int llu;

/**---Graph move---**/
int dx[]= {-1, 0, 1,  0, -1, -1,  1, 1};
int dy[]= { 0, 1, 0, -1, -1,  1, -1, 1};
int kx[]= {-2,-1, 1, 2,  2,  1, -1, -2};
int ky[]= { 1, 2, 2, 1, -1, -2, -2, -1};

//map<int,int,greater<int>>m;
string s;
int cnt=0;
bool check(char ch,int pos)
{
    if(ch=='a'  && s[pos+1]=='b' && s[pos+2]=='c')return true;
    else if(ch=='b' && pos>0 && s[pos-1]=='a' && s[pos+1]=='c')return true;
    else if(ch=='c' && pos>1 && s[pos-1]=='b' && s[pos-2]=='a')return true;
    else return false;
}

int khela_hbe(int pos,char c)
{
    char ch=s[pos];
    bool before=false,after=false;

    if(check(ch,pos))before=true;
    s[pos]=c;
    if(check(c,pos))after=true;

    if(before==after)
    {
        return cnt;
    }
    else if(after)
    {
        return cnt=cnt+1;
    }
    else
    {
        return cnt=cnt-1;
    }
}
void solved()
{
    int n,q;
    cin>>n>>q>>s;
    s=s+"OO";
    for0(0,n-2)
    {
        if(s[i]=='a' && s[i+1]=='b' && s[i+2]=='c')cnt++;
    }
    int pos;
    char ch;
    while(q--)
    {
        cin>>pos>>ch;
        pos--;
        cout<<khela_hbe(pos,ch)<<nl;
    }
}

int main()
{
    ll tc;
    //cin>>tc;
    tc=1;
    while(tc--)
    {
        solved();
    }
}
/**

**/
