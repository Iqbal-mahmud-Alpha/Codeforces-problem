#include <bits/stdc++.h>
using namespace std;
#define faster            ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ff                first
#define ss                second
#define pb                push_back
#define pr                pair<int,int>
#define mem(a,b)          memset(a,b,sizeof(a))
#define gcd(a, b)         __gcd(a, b)
#define lcm(a, b)         (a * (b / gcd(a, b)))
#define all(a)            a.begin(), a.end()
#define setbit(n)         __builtin_popcount(n);
#define totalbit(n)       log2(n)+1
#define lens(s)           s.size()
#define nl                endl
#define lena(a)           sizeof(a)/sizeof(a[0])
#define posation(x)       cout<<fixed<<setprecision(x)
#define pi                3.141592653589793
#define INF               1000000000
#define mod               1000000007 //10^9+7;
#define num               100005

/**----data type----**/
typedef long long int ll;
typedef unsigned long long int llu;

/**---Graph move---**/
int dx[]= {-1, 0, 1,  0, -1, -1,  1, 1};
int dy[]= { 0, 1, 0, -1, -1,  1, -1, 1};
int kx[]= {-2,-1, 1, 2,  2,  1, -1, -2};
int ky[]= { 1, 2, 2, 1, -1, -2, -2, -1};

bool cmp(pair<string,int> a,pair<string,int> b)
{
    return a.ss<b.ss;
}
int main()
{
    int n,k;
    cin>>n>>k;
    string s;
    vector<pair<string,int>>v;
    map<int,int>m;
    while(n--)
    {
        cin>>s;
        v.pb({s,lens(s)});
        m[lens(s)]++;
    }
    string ans;
    cin>>ans;
    sort(all(v),cmp);
    int best=0,cnt=0;
    for(auto i:v)
    {
        if(i.ss<lens(ans))
        {
            cnt++;
            if(cnt==k)
            {
                best+=5+cnt;
                cnt=0;
            }
        }
        else if(i.ss==lens(ans))
        {
            best+=cnt+1;
            break;
        }
    }
    cnt=0;
    int worst=0;
    for(auto i:v)
    {
        if(i.ss<lens(ans))
        {
            cnt++;
            if(cnt==k)
            {
                worst+=5+cnt;
                cnt=0;
            }
        }
        else if(i.ss==lens(ans))
        {
            if(m[i.ss]==1)
            {
                worst+=1;
            }
            else
            {
                m[i.ss]--;
                cnt++;
                if(m[i.ss]==0)
                {
                    worst+=1;
                }
                else
                {
                    if(cnt==k)
                    {
                        worst+=cnt+5;
                        cnt=0;
                    }
                }
            }
        }
    }
    cout<<best<<' '<<worst+cnt<<nl;
}
