#include <bits/stdc++.h>
using namespace std;
#define faster            ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define ff                first
#define ss                second
#define pb                push_back
#define pr                pair<int,int>
#define mem(a,b)          memset(a,b,sizeof(a))
#define gcd(a, b)         __gcd(a, b)
#define lcm(a, b)         (a * (b / gcd(a, b)))
#define all(a)            a.begin(), a.end()
#define setbit(n)         __builtin_popcount(n);
#define totalbit(n)       log2(n)+1
#define lens(s)           s.size()
#define lena(a)           sizeof(a)/sizeof(a[0])
#define posation(x)       cout<<fixed<<setprecision(x)
#define pi                3.141592653589793
#define INF               1000000000
#define mod               1000000007 //10^9+7;
#define num               100005

/**----data type----*/
typedef long long int ll;
typedef unsigned long long int llu;

vector<int>v[num];
int in[num],low[num],vis[num];
int times=0;
bool hasBridgs;
vector<pr>vec;
void dfs(int node,int parent)
{
    vis[node]=1;
    in[node]=low[node]=times++;
    for(int child:v[node])
    {
        if(child==parent)continue;
        if(vis[child])
        {
            low[node]=min(in[child],low[node]);
            if(in[node]>in[child])
            {
                vec.pb({node,child});
            }
        }
        else
        {
            dfs(child,node);
            low[node]=min(low[node],low[child]);
            if(low[child]>in[node])
            {
                hasBridgs=true;
                return;
            }
            vec.pb({node,child});
        }
    }
}
int main()
{
    int tc,n,e,x,y;
    cin>>n>>e;
    for(int i=1; i<=e; i++)
    {
        cin>>x>>y;
        v[x].pb(y);
        v[y].pb(x);
    }
    dfs(1,-1);
    if(hasBridgs==true)
    {
        cout<<0<<endl;
    }
    else
    {
        for(auto x:vec)
        {
            cout<<x.ff<<' '<<x.ss<<endl;
        }
    }
}

