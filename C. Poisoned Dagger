/**
                                        بِسْمِ اللهِ الرَّحْمٰنِ الرَّحِيْمِ
**/
#include <bits/stdc++.h>
using namespace std;
#define faster            ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);
#define ff                first
#define ss                second
#define pb                push_back
#define pr                pair<int,int>
#define im                -1e18
#define mem(a,b)          memset(a,b,sizeof(a))
#define gcd(a, b)         __gcd(a, b)
#define lcm(a, b)         (a * (b / gcd(a, b)))
#define all(a)            a.begin(), a.end()
#define setbit(n)         __builtin_popcount(n);
#define totalbit(n)       log2(n)+1
#define oh                cout<<"Alpha valo sele"<<endl;

#define for0(a,n)         for(int i=a;i<n;i++)
#define for1(a,n)         for(int i=a;i<=n;i++)
#define rfor0(n, a)       for(int i=n-1; i>=a; i--)
#define rfor1(n, a)       for(int i=n; i>a; i--)

#define nl                endl
#define len(v)            v.size()
#define lena(a)           sizeof(a)/sizeof(a[0])
#define no                cout<<"NO"<<nl;
#define yes               cout<<"YES"<<nl;
#define posation(x)       cout<<fixed<<setprecision(x)
#define pi                3.141592653589793
#define INF               100000000000
#define mod               1000000007 //10^9+7;
#define num               10000

/**----data type----**/
typedef long long int ll;
typedef unsigned long long int llu;

/**---Graph move---**/
int dx[]= {-1, 0, 1,  0, -1, -1,  1, 1};
int dy[]= { 0, 1, 0, -1, -1,  1, -1, 1};
int kx[]= {-2,-1, 1, 2,  2,  1, -1, -2};
int ky[]= { 1, 2, 2, 1, -1, -2, -2, -1};

//map<int,int,greater<int>>m;

void solved()
{
    ll n,h;
    cin>>n>>h;
    ll a[n];
    for(int i=0; i<n; i++)cin>>a[i];
    if(n==1)
    {
        cout<<h<<nl;
        return;
    }
    vector<ll>v;
    for(int i=1; i<n; i++)
    {
        v.pb(a[i]-a[i-1]);
    }
    vector<ll>pre(len(v));
    sort(all(v));
    pre[0]=v[0];
    for(int i=1; i<len(v); i++)
    {
        pre[i]=pre[i-1]+v[i];
    }
    ll l=1,r=h,ans=LONG_LONG_MAX,sum=0;
    ll mid;
    while(l<=r)
    {
        mid=(l+r)/2;
        ll in=lower_bound(all(v),mid)-v.begin();
        if((in-1)>=0)sum=pre[in-1]+mid*(len(pre)+1-in);
        else sum=mid+mid*(len(pre)-in);
        if(sum>=h)ans=min(mid,ans);
        if(sum>=h)r=mid-1;
        else l=mid+1;

    }
    cout<<ans<<nl;
}
int main()
{
    ll tc;
    cin>>tc;
    //tc=1;
    while(tc--)
    {
        solved();
    }
}
